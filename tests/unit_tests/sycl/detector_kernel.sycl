/** Detray library, part of the ACTS project (R&D line)
 *
 * (c) 2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

#include <CL/sycl.hpp>

#include "detector_kernel.hpp"

namespace detray {

namespace kernels {
class test;
}  // namespace kernels

void detector_test(detector_view<detector_host_type> det_data,
                   sycl::queue_wrapper &queue) {

    const std::size_t globalSize = 8;
    const std::size_t localSize = 4;
    const auto num = (globalSize + localSize - 1) / localSize;

    auto ndrange = ::sycl::nd_range<1>{::sycl::range<1>(num * localSize),
                                       ::sycl::range<1>(localSize)};

    reinterpret_cast<::sycl::queue *>(queue.queue())
        ->submit([&](::sycl::handler &h) {
            h.parallel_for<kernels::test>(
                ndrange, [det_data](::sycl::nd_item<1> item) {
                    detector_device_type det(det_data);
                });
        })
        .wait_and_throw();
}

}  // namespace detray